{"version":3,"sources":["webpack:///src/app/services/base.service.ts","webpack:///src/app/services/toast.service.ts","webpack:///src/app/services/user.service.ts"],"names":["BaseService","http","toastService","customHeaders","HttpHeaders","url","options","get","pipe","map","response","catchErr","body","post","patch","put","catchError","error","handleError","msg","throwError","ToastService","toastr","success","UserService","router","usersEndpoint","environment","id"],"mappings":"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","file":"common-es5.js","sourcesContent":["import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { ToastService } from \"./toast.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class BaseService {\n  private customHeaders = new HttpHeaders();\n  constructor(private http: HttpClient, private toastService: ToastService) {}\n\n  get<T = {}>(url: string, options?: any) {\n    return this.http.get<T>(url, { ...this.customHeaders, ...options }).pipe(\n      map((response) => response),\n      this.catchErr()\n    ) as unknown as Observable<T>;\n  }\n\n  post<T = {}>(body: any, url: string, options?: any) {\n    return this.http\n      .post<T>(url, body, { ...this.customHeaders, ...options })\n      .pipe(this.catchErr()) as unknown as Observable<T>;\n  }\n\n  patch<T = {}>(body: any, url: string, options?: any) {\n    return this.http\n      .patch<T>(url, { ...body }, { ...this.customHeaders, ...options })\n      .pipe(this.catchErr()) as unknown as Observable<T>;\n  }\n\n  put<T = {}>(body: any, url: string, options?: any) {\n    return this.http\n      .put<T>(url, { ...body }, { ...this.customHeaders, ...options })\n      .pipe(this.catchErr()) as unknown as Observable<T>;\n  }\n\n  delete<T = {}>(url: string, options?: any) {\n    return this.http\n      .delete<T>(url, { ...this.customHeaders, ...options })\n      .pipe(this.catchErr()) as unknown as Observable<T>;\n  }\n\n  private catchErr() {\n    return catchError((error) => this.handleError(error));\n  }\n\n  private handleError({ error }: HttpErrorResponse) {\n    if (error.msg) {\n      this.toastService.error(error.msg);\n    }\n    return throwError(() => error);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ToastrService } from \"ngx-toastr\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ToastService {\n  constructor(private toastr: ToastrService) {}\n\n  public success(msg: string) {\n    this.toastr.success(msg);\n  }\n\n  public error(msg: string) {\n    this.toastr.error(msg);\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { BaseService } from \"./base.service\";\nimport { ToastService } from \"./toast.service\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserService extends BaseService {\n  private usersEndpoint = `${environment.API_URL}/users`;\n  constructor(\n    http: HttpClient,\n    toastService: ToastService,\n    private router: Router\n  ) {\n    super(http, toastService);\n  }\n\n  public getAllUsers(): Observable<any> {\n    return this.get(`${this.usersEndpoint}`);\n  }\n\n  public getProfile(): Observable<any> {\n    return this.get(`${this.usersEndpoint}/me`);\n  }\n\n  public updateProfile(body: any): Observable<any> {\n    return this.patch(body, `${this.usersEndpoint}/updateMe`);\n  }\n\n  public updateUser(body: any, id: string): Observable<any> {\n    return this.patch(body, `${this.usersEndpoint}/${id}`);\n  }\n\n  public createUser(body: any): Observable<any> {\n    return this.post(body, `${this.usersEndpoint}/admin/signup`);\n  }\n}\n"]}